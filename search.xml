<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法学习【二叉树篇】（1）基本概念</title>
      <link href="/2022/02/25/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AF%87%E3%80%91%EF%BC%881%EF%BC%89/"/>
      <url>/2022/02/25/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AF%87%E3%80%91%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="二叉树表示"><a href="#二叉树表示" class="headerlink" title="二叉树表示"></a>二叉树表示</h3><pre class="line-numbers language-c++"><code class="language-c++">struct TreeNode &#123;  int val;  TreeNode *left;  TreeNode *right;  TreeNode(int x) : val(x),left(NULL),right(NULL)&#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h3><p>注意递归算法的三要素：</p><ol><li><p><strong>确定递归函数的参数和返回值：</strong> 确定哪些参数是递归的过程中需要处理的，那么就在递归函数里加上这个参数， 并且还要明确每次递归的返回值是什么进而确定递归函数的返回类型。</p><pre class="line-numbers language-c++"><code class="language-c++">void traversal(TreeNode * cur,vector<int>& vec)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>确定终止条件：</strong> 写完了递归算法, 运行的时候，经常会遇到栈溢出的错误，就是没写终止条件或者终止条件写的不对，操作系统也是用一个栈的结构来保存每一层递归的信息，如果递归没有终止，操作系统的内存栈必然就会溢出。</p><pre class="line-numbers language-c++"><code class="language-c++">if(cur == NULL) return;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>确定单层递归的逻辑：</strong> 确定每一层递归需要处理的信息。在这里也就会重复调用自己来实现递归的过程。</p><pre class="line-numbers language-c++"><code class="language-c++">vec.push_back(cur->val); //中traversal(cur->left,vec);//左traversal(cur->right,vec);//右<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><pre class="line-numbers language-c++"><code class="language-c++">class Solution &#123;public:  void traversal(TreeNode* cur,vector<int>& vec)&#123;    if(cur == NULL) return;    vec.push_back(cur->val);  //中    traversal(cur->left,vec); //左    traversal(cur->right,vec);//右  &#125;  vector<int> preorderTraversal(TreeNode* root)&#123;    vector<int> result;    traversal(root,result);    return result;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><pre class="line-numbers language-c++"><code class="language-c++">class Solution &#123;public:  void traversal(TreeNode* cur,vector<int>& vec)&#123;    if(cur == NULL) return;    traversal(cur->left,vec); //左    vec.push_back(cur->val);  //中    traversal(cur->right,vec);//右  &#125;  vector<int> InorderTraversal(TreeNode* root)&#123;    vector<int> result;    traversal(root,result);    return result;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><pre class="line-numbers language-c++"><code class="language-c++">public:  void traversal(TreeNode* cur,vector<int>& vec)&#123;    if(cur == NULL) return;    traversal(cur->left,vec); //左    traversal(cur->right,vec);//右    vec.push_back(cur->val);  //中  &#125;  vector<int> PostorderTraversal(TreeNode* root)&#123;    vector<int> result;    traversal(root,result);    return result;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的迭代遍历"><a href="#二叉树的迭代遍历" class="headerlink" title="二叉树的迭代遍历"></a>二叉树的迭代遍历</h3><p>用栈实现</p><h4 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h4><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><pre class="line-numbers language-c++"><code class="language-c++">class Solution&#123;public:  vector<int> preorderTraversal(TreeNode* root)&#123;    stack<TreeNode*> st;    vector<int> result;    if(root == NULL) return result;    st.push(root);    while(!st.empty())&#123;      TreeNode* node = st.top();      st.pop();      result.push_back(node->val);      if(node->right) st.push(node->right);      if(node->left) st.push(node->left);    &#125;    return result;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><pre class="line-numbers language-c++"><code class="language-c++">class Solution&#123;public:  vector<int> InorderTraversal(TreeNode* root)&#123;    stack<TreeNode*> st;    vector<int> result;    TreeNode* cur = root;    while(cur!=NULL||!st.empty())&#123;      if(cur!=NULL)&#123;        st.push(cur);        cur = cur->left;      &#125;else&#123;        cur = st.top();        st.pop();        result.push_back(cur->val);        cur = cur->right;      &#125;    &#125;    return result;      &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>调整一下先序遍历的代码顺序，就变成中右左的遍历顺序，然后在反转result数组，输出的结果顺序就是左右中了</p><pre class="line-numbers language-c++"><code class="language-c++">class Solution&#123;public:  vector<int> preorderTraversal(TreeNode* root)&#123;    stack<TreeNode*> st;    vector<int> result;    if(root == NULL) return result;    st.push(root);    while(!st.empty())&#123;      TreeNode* node = st.top();      st.pop();      result.push_back(node->val);      if(node->left) st.push(node->left);      if(node->right) st.push(node->right);          &#125;    reverse(result.begin(),result.end());    return result;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统一格式"><a href="#统一格式" class="headerlink" title="统一格式"></a>统一格式</h4><pre class="line-numbers language-c++"><code class="language-c++">//中序遍历class Solution &#123;public:    vector<int> inorderTraversal(TreeNode* root) &#123;        vector<int> result;        stack<TreeNode*> st;        if (root != NULL) st.push(root);        while (!st.empty()) &#123;            TreeNode* node = st.top();            if (node != NULL) &#123;                st.pop(); // 将该节点弹出，避免重复操作，下面再将右中左节点添加到栈中                if (node->right) st.push(node->right);  // 添加右节点（空节点不入栈）                st.push(node);                          // 添加中节点                st.push(NULL); // 中节点访问过，但是还没有处理，加入空节点做为标记。                if (node->left) st.push(node->left);    // 添加左节点（空节点不入栈）            &#125; else &#123; // 只有遇到空节点的时候，才将下一个节点放进结果集                st.pop();           // 将空节点弹出                node = st.top();    // 重新取出栈中元素                st.pop();                result.push_back(node->val); // 加入到结果集            &#125;        &#125;        return result;    &#125;&#125;;//前序遍历class Solution &#123;public:    vector<int> preorderTraversal(TreeNode* root) &#123;        vector<int> result;        stack<TreeNode*> st;        if (root != NULL) st.push(root);        while (!st.empty()) &#123;            TreeNode* node = st.top();            if (node != NULL) &#123;                st.pop();                if (node->right) st.push(node->right);  // 右                if (node->left) st.push(node->left);    // 左                st.push(node);                          // 中                st.push(NULL);            &#125; else &#123;                st.pop();                node = st.top();                st.pop();                result.push_back(node->val);            &#125;        &#125;        return result;    &#125;&#125;;//后序遍历class Solution &#123;public:    vector<int> postorderTraversal(TreeNode* root) &#123;        vector<int> result;        stack<TreeNode*> st;        if (root != NULL) st.push(root);        while (!st.empty()) &#123;            TreeNode* node = st.top();            if (node != NULL) &#123;                st.pop();                st.push(node);                          // 中                st.push(NULL);                if (node->right) st.push(node->right);  // 右                if (node->left) st.push(node->left);    // 左            &#125; else &#123;                st.pop();                node = st.top();                st.pop();                result.push_back(node->val);            &#125;        &#125;        return result;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> programming-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/25/hello-world/"/>
      <url>/2022/02/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透</title>
      <link href="/2021/12/16/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
      <url>/2021/12/16/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h4 id="渗透流程"><a href="#渗透流程" class="headerlink" title="渗透流程"></a>渗透流程</h4><p>后台权限</p><p>webshell权限</p><p>服务器权限</p><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><h5 id="权限划分"><a href="#权限划分" class="headerlink" title="权限划分"></a>权限划分</h5><p>Windows :SYSTEM Administrator User</p><p>Linux:root user</p><h5 id="webshell定义"><a href="#webshell定义" class="headerlink" title="webshell定义"></a>webshell定义</h5><p>对web中的文件拥有增删改查权限</p><h5 id="CMD命令"><a href="#CMD命令" class="headerlink" title="CMD命令"></a>CMD命令</h5><p> whoami &#x2F;priv 查看权限列表</p><p>net命令</p><pre><code>用户操作net usernet user aaanet user aaa 123456net user aaa /delnet user aaa 123456 /addnet user aaa /active.yesnet user aaa /active.no用户组操作net localgroup Administrators test /addnet localgroup Administrators test /delnet localgroup Administrators</code></pre><p>tasklist</p><pre><code>tasklist /svctasklist /v</code></pre><p>netstat</p><pre><code>netstat -ano</code></pre><p>nets firewall set opcode disable</p><h5 id="Windows基础知识"><a href="#Windows基础知识" class="headerlink" title="Windows基础知识"></a>Windows基础知识</h5><p>在Windows服务器中默认只允许拥有管理员权限的用户才能登入到计算机中</p><p>共同默认账户Administrator Guest</p><p>Windows默认远程RDP(TermService)3389: tasklist &#x2F;svc-&gt;TermService-&gt;PID</p><h5 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h5><p>系统漏洞提权</p><p>不正确配置提权</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
